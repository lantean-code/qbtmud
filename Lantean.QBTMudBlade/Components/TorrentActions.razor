@if (RenderType == RenderType.Toolbar)
{
    <MudToolBar Dense="true" DisableGutters="true" WrapContent="true">
        @ToolbarContent
    </MudToolBar>
}
else if (RenderType == RenderType.ToolbarContents)
{
    @ToolbarContent
}
else if (RenderType == RenderType.MixedToolbar)
{
    <MudToolBar Dense="true" DisableGutters="true" WrapContent="true">
        @MixedToolbarContent
    </MudToolBar>
}
else if (RenderType == RenderType.MixedToolbarContents)
{
    @MixedToolbarContent
}
else if (RenderType == RenderType.InitialIconsOnly)
{
    @foreach (var action in Actions.Take(5))
    {
        @if (action.SeparatorBefore)
        {
            <MudDivider Vertical="true" />
        }

        <MudIconButton Title="@action.Text" Icon="@action.Icon" Color="action.Color" OnClick="action.Callback" Disabled="Disabled" />
    }

    @Menu(Actions.Skip(5))
}
else if (RenderType == RenderType.Children)
{
    var parent = Actions.FirstOrDefault(a => a.Text == ParentAction?.Text);
    if (parent is not null)
    {
        <MudList Clickable="true">
            @foreach (var action in parent.Children)
            {
                @if (action.SeparatorBefore)
                {
                    <MudDivider />
                }

                <MudListItem Icon="@action.Icon" IconColor="action.Color" OnClick="action.Callback" Disabled="Disabled">@action.Text</MudListItem>
            }
        </MudList>
    }
}
else
{
    @Menu(Actions)
}

@code {
    private RenderFragment ToolbarContent
    {
        get
        {
            return __builder =>
            {
                foreach (var action in Actions)
                {
                    if (action.SeparatorBefore)
                    {
                        <MudDivider Vertical="true" />
                    }
                    
                    if (!action.Children.Any())
                    {
                        if (action.Icon is null)
                        {
                            <MudButton Color="action.Color" OnClick="action.Callback">@action.Text</MudButton>
                        }
                        else
                        {
                            <MudIconButton Title="@action.Text" Icon="@action.Icon" Color="action.Color" OnClick="action.Callback" Disabled="Disabled" />
                        }
                    }
                    else
                    {
                        <MudMenu Icon="@action.Icon" IconColor="@action.Color" Label="@action.Text" title="@action.Text" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                            @foreach (var childItem in action.Children)
                            {
                                @ChildItem(childItem)
                            }
                        </MudMenu>
                    }
                }
            };
        }
    }

    private RenderFragment MixedToolbarContent
    {
        get
        {
            return __builder =>
            {
                foreach (var action in Actions)
                {
                    if (action.SeparatorBefore)
                    {
                        <MudDivider Vertical="true" />
                    }
                    
                    if (!action.Children.Any())
                    {
                        if (action.Icon is null)
                        {
                            <MudButton Color="action.Color" OnClick="action.Callback" Disabled="Disabled">@action.Text</MudButton>
                        }
                        else
                        {
                            <MudIconButton Title="@action.Text" Icon="@action.Icon" Color="action.Color" OnClick="action.Callback" Disabled="Disabled" />
                        }
                    }
                    else
                    {
                        <MudMenu Label="@action.Text" title="@action.Text" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" EndIcon="@Icons.Material.Filled.ArrowDropDown">
                            @foreach (var childItem in action.Children)
                            {
                                @ChildItem(childItem)
                            }
                        </MudMenu>
                    }
                }
            };
        }
    }

    private RenderFragment ChildItem(TorrentAction action)
    {
        return __builder =>
        {
            if (action.SeparatorBefore)
            {
                <MudDivider />
            }

            <MudMenuItem Icon="@action.Icon" IconColor="action.Color" OnClick="action.Callback" OnTouch="action.Callback" Disabled="Disabled">@action.Text</MudMenuItem>
        };
    }

    private RenderFragment Menu(IEnumerable<TorrentAction> actions)
    {
        return __builder =>
        {
            <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" Label="Actions" EndIcon="@Icons.Material.Filled.ArrowDropDown" @ref="ActionsMenu" Disabled="@(!Hashes.Any())">
                @foreach (var action in actions)
                {
                    @if (action.SeparatorBefore)
                    {
                        <MudDivider />
                    }
                    
                    if (!action.Children.Any())
                    {
                        <MudMenuItem Icon="@action.Icon" IconColor="action.Color" OnClick="action.Callback" OnTouch="action.Callback" Disabled="Disabled">
                            @action.Text
                        </MudMenuItem>
                    }
                    else
                    {
                        <MudMenuItem Icon="@action.Icon" IconColor="action.Color" OnTouch="@(t => SubMenuTouch(action))" OnClick="@(t => SubMenuTouch(action))">
                            <MudMenu Dense="true" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft" ActivationEvent="MouseEvent.MouseOver" Icon="@Icons.Material.Filled.ArrowDropDown" DisableElevation="true" DisableRipple="true" Class="sub-menu">
                                <ActivatorContent>
                                    @action.Text
                                </ActivatorContent>

                                <ChildContent>
                                    @foreach (var childItem in action.Children)
                                    {
                                        @ChildItem(childItem)
                                    }
                                </ChildContent>
                            </MudMenu>
                        </MudMenuItem>
                    }
                }
            </MudMenu>
        };
    }
}