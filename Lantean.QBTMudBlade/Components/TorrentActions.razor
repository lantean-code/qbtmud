@if (Type == RenderType.Toolbar)
{
    <MudToolBar Dense="true" DisableGutters="true" WrapContent="true">
        @ToolbarContent
    </MudToolBar>
}
else if (Type == RenderType.ToolbarContents)
{
    @ToolbarContent
}
else if (Type == RenderType.MixedToolbar)
{
    <MudToolBar Dense="true" DisableGutters="true" WrapContent="true">
        @MixedToolbarContent
    </MudToolBar>
}
else if (Type == RenderType.MixedToolbarContents)
{
    @MixedToolbarContent
}
else if (Type == RenderType.InitialIconsOnly)
{
    @foreach (var option in GetOptions().Take(5))
    {
        @if (option is Divider)
        {
            <MudDivider Vertical="true" />
        }
        else
        {
            <MudIconButton Title="@option.Name" Icon="@option.Icon" Color="option.Color" OnClick="option.Callback" Disabled="Disabled" />
        }
    }

    @Menu(GetOptions().Skip(5));
}
else
{
    @Menu(GetOptions());
}

@code {
    private RenderFragment ToolbarContent
    {
        get
        {
            return __builder =>
            {
                foreach (var option in GetOptions())
                {
                    if (option is Divider)
                    {
                        <MudDivider Vertical="true" />
                    }
                    else if (!option.Children.Any())
                    {
                        if (option.Icon is null)
                        {
                            <MudButton Color="option.Color" OnClick="option.Callback">@option.Name</MudButton>
                        }
                        else
                        {
                            <MudIconButton Title="@option.Name" Icon="@option.Icon" Color="option.Color" OnClick="option.Callback" Disabled="Disabled" />
                        }
                    }
                    else
                    {
                        <MudMenu Icon="@option.Icon" IconColor="@option.Color" Label="@option.Name" title="@option.Name" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft">
                            @foreach (var childItem in option.Children)
                            {
                                @ChildItem(childItem)
                            }
                        </MudMenu>
                    }
                }
            };
        }
    }

    private RenderFragment MixedToolbarContent
    {
        get
        {
            return __builder =>
            {
                foreach (var option in GetOptions())
                {
                    if (option is Divider)
                    {
                        <MudDivider Vertical="true" />
                    }
                    else if (!option.Children.Any())
                    {
                        if (option.Icon is null)
                        {
                            <MudButton Color="option.Color" OnClick="option.Callback" Disabled="Disabled">@option.Name</MudButton>
                        }
                        else
                        {
                            <MudIconButton Title="@option.Name" Icon="@option.Icon" Color="option.Color" OnClick="option.Callback" Disabled="Disabled" />
                        }
                    }
                    else
                    {
                        <MudMenu Label="@option.Name" title="@option.Name" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" EndIcon="@Icons.Material.Filled.ArrowDropDown">
                            @foreach (var childItem in option.Children)
                            {
                                @ChildItem(childItem)
                            }
                        </MudMenu>
                    }
                }
            };
        }
    }

    private RenderFragment ChildItem(Action option)
    {
        return __builder =>
        {
            if (option is Divider)
            {
                <MudDivider />
            }
            else
            {
                <MudMenuItem Icon="@option.Icon" IconColor="option.Color" OnClick="option.Callback" OnTouch="option.Callback" Disabled="Disabled">@option.Name</MudMenuItem>
            }
        };
    }

    private RenderFragment Menu(IEnumerable<Action> actions)
    {
        return __builder =>
        {
            <MudMenu Dense="true" AnchorOrigin="Origin.BottomLeft" TransformOrigin="Origin.TopLeft" Label="Actions" EndIcon="@Icons.Material.Filled.ArrowDropDown" @ref="ActionsMenu" Disabled="@(!Hashes.Any())">
                @foreach (var option in actions)
                {
                    @if (option is Divider)
                    {
                        <MudDivider />
                    }
                    else if (!option.Children.Any())
                    {
                        <MudMenuItem Icon="@option.Icon" IconColor="option.Color" OnClick="option.Callback" OnTouch="option.Callback" Disabled="Disabled">
                            @option.Name
                        </MudMenuItem>
                    }
                    else
                    {
                        <MudMenuItem Icon="@option.Icon" IconColor="option.Color">
                            <MudMenu Dense="true" AnchorOrigin="Origin.TopRight" TransformOrigin="Origin.TopLeft" ActivationEvent="MouseEvent.MouseOver" Icon="@Icons.Material.Filled.ArrowDropDown" DisableElevation="true" DisableRipple="true" Class="sub-menu">
                                <ActivatorContent>
                                    @option.Name
                                </ActivatorContent>

                                <ChildContent>
                                    @foreach (var childItem in option.Children)
                                    {
                                        @ChildItem(childItem)
                                    }
                                </ChildContent>
                            </MudMenu>
                        </MudMenuItem>
                    }
                }
            </MudMenu>
        };
    }
}