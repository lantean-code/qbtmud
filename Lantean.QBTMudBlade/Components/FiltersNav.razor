<ContextMenu @ref="StatusContextMenu" Dense="true" InsideDrawer="true">
    @TorrentControls(_statusType)
</ContextMenu>

<ContextMenu @ref="CategoryContextMenu" Dense="true" InsideDrawer="true">
    <MudMenuItem Icon="@Icons.Material.Outlined.AddCircle" IconColor="Color.Info" OnClick="AddCategory">Add category</MudMenuItem>
    @if (IsCategoryTarget)
    {
        <MudMenuItem Icon="@Icons.Material.Filled.Edit" IconColor="Color.Info" OnClick="EditCategory">Edit category</MudMenuItem>
        <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="RemoveCategory">Remove category</MudMenuItem>
    }
    <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="RemoveUnusedCategories">Remove unused categories</MudMenuItem>
    <MudDivider />
    @TorrentControls(_categoryType)
</ContextMenu>

<ContextMenu @ref="TagContextMenu" Dense="true" InsideDrawer="true">
    <MudMenuItem Icon="@Icons.Material.Outlined.AddCircle" IconColor="Color.Info" OnClick="AddTag">Add tag</MudMenuItem>
    @if (IsTagTarget)
    {
        <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="RemoveTag">Remove tag</MudMenuItem>
    }
    <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="RemoveUnusedTags">Remove unused tags</MudMenuItem>
    <MudDivider />
    @TorrentControls(_tagType)
</ContextMenu>

<ContextMenu @ref="TrackerContextMenu" Dense="true" InsideDrawer="true">
    <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="RemoveUnusedCategories">Remove tracker</MudMenuItem>
    <MudDivider />
    @TorrentControls(_trackerType)
</ContextMenu>

<MudNavMenu Dense="true">
    <MudNavGroup Title="Status" @bind-Expanded="_statusExpanded">
        @foreach (var (status, count) in Statuses)
        {
            var (icon, color) = DisplayHelpers.GetStatusIcon(status);
            <FakeNavLink Class="filter-menu-item" Active="@(Status == status)" Icon="@icon" IconColor="@color" OnClick="@(e => StatusValueChanged(status))" OnContextMenu="@(e => StatusOnContextMenu(e, status))" OnLongPress="@(e => StatusOnLongPress(e, status))">@($"{status.GetStatusName()} ({count})")</FakeNavLink>
        }
    </MudNavGroup>
    <MudNavGroup Title="Categories" @bind-Expanded="_categoriesExpanded">
        @foreach (var (category, count) in Categories)
        {
            <FakeNavLink Class="filter-menu-item" Active="@(Category == category)" Icon="@Icons.Material.Filled.List" IconColor="Color.Info" OnClick="@(e => CategoryValueChanged(category))" OnContextMenu="@(e => CategoryOnContextMenu(e, category))" OnLongPress="@(e => CategoryOnLongPress(e, category))">@($"{category} ({count})")</FakeNavLink>
        }
    </MudNavGroup>
    <MudNavGroup Title="Tags" @bind-Expanded="_tagsExpanded">
        @foreach (var (tag, count) in Tags)
        {
            <FakeNavLink Class="filter-menu-item" Active="@(Tag == tag)" Icon="@Icons.Material.Filled.Label" IconColor="Color.Info" OnClick="@(e => TagValueChanged(tag))" OnContextMenu="@(e => TagOnContextMenu(e, tag))" OnLongPress="@(e => TagOnLongPress(e, tag))">@($"{tag} ({count})")</FakeNavLink>
        }
    </MudNavGroup>
    <MudNavGroup Title="Trackers" @bind-Expanded="_trackersExpanded">
        @foreach (var (tracker, count) in Trackers)
        {
            <FakeNavLink Class="filter-menu-item" Active="@(Tracker == tracker)" Icon="@Icons.Material.Filled.PinDrop" IconColor="Color.Info" OnClick="@(e => TrackerValueChanged(tracker))" OnContextMenu="@(e => TrackerOnContextMenu(e, tracker))" OnLongPress="@(e => TrackerOnLongPress(e, tracker))">@($"{tracker} ({count})")</FakeNavLink>
        }
    </MudNavGroup>
</MudNavMenu>


@code {
    private RenderFragment TorrentControls(string type)
    {
        return __builder =>
        {
            <MudMenuItem Icon="@Icons.Material.Filled.PlayArrow" IconColor="Color.Success" OnClick="@(e => ResumeTorrents(type))">Resume torrents</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.Pause" IconColor="Color.Warning" OnClick="@(e => PauseTorrents(type))">Pause torrents</MudMenuItem>
            <MudMenuItem Icon="@Icons.Material.Filled.Delete" IconColor="Color.Error" OnClick="@(e => RemoveTorrents(type))">Remove torrents</MudMenuItem>
        };
    }
}