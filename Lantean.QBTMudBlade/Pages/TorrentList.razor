@page "/"
@layout ListLayout

<MudToolBar DisableGutters="true" Dense="true">
    <MudIconButton Icon="@Icons.Material.Outlined.AddLink" OnClick="AddTorrentLink" Title="Add torrent link" />
    <MudIconButton Icon="@Icons.Material.Outlined.AddCircle" OnClick="AddTorrentFile" Title="Add torrent file" />
    <MudDivider Vertical="true" />
    <TorrentActions Type="RenderType.InitialIconsOnly" Hashes="GetSelectedTorrents()" />
    <MudDivider Vertical="true" />
    <MudIconButton Icon="@Icons.Material.Outlined.Info" Color="Color.Inherit" Disabled="@(!ToolbarButtonsEnabled)" OnClick="ShowTorrent" Title="View torrent details" />
    <MudIconButton Icon="@Icons.Material.Outlined.ViewColumn" Color="Color.Inherit" OnClick="ColumnOptions" Title="Choose Columns" />
    <MudSpacer />
    <MudTextField Value="SearchText" TextChanged="SearchTextChanged" Immediate="true" DebounceInterval="1000" Placeholder="Filter torrent list" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
</MudToolBar>

<MudContainer MaxWidth="MaxWidth.ExtraExtraLarge" Class="ma-0 pa-0">
    <DynamicTable
        @ref="Table"
        T="Torrent" 
        ColumnDefinitions="Columns" 
        ColumnFilter="@(c => c.Id != "#" || Preferences?.QueueingEnabled == true)" 
        Items="Torrents" 
        OnRowClick="RowClick" 
        MultiSelection="true"
        SelectedItemsChanged="SelectedItemsChanged"
        SelectedItemChanged="SelectedItemChanged"
        SortColumnChanged="SortColumnChangedHandler"
        SortDirectionChanged="SortDirectionChangedHandler"
    />
</MudContainer>

@code {
    private static RenderFragment<RowContext<Torrent>> ProgressBarColumn
    {
        get
        {
            return context => __builder =>
            {
                var value = (float?)context.GetValue();
                var color = value < 1 ? Color.Success : Color.Info;
                <MudProgressLinear title="Progress" Color="@color" Value="@((value ?? 0) * 100)" Class="progress-expand" Size="Size.Large">
                    @DisplayHelpers.Percentage(value)
                </MudProgressLinear>;
            };
        }
    }

    private static RenderFragment<RowContext<Torrent>> IconColumn
    {
        get
        {
            return context => __builder =>
            {
                var (icon, color) = DisplayHelpers.GetStateIcon((string?)context.GetValue());
                <MudIcon Icon="@icon" Color="@color" />
            };
        }
    }
}